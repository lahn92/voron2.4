Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-261-g248d3dbf'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, May  2 2024, 11:59:08) [GCC 12.2.0]'
Building C code module c_helper.so
Start printer at Tue Jul  9 15:10:38 2024 (1720534238.0 705.4)
===== Config file =====
[mcu]
serial = /dev/serial/by-id/<your-mcu-id>

[virtual_sdcard]
path = /home/pi/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[printer]
kinematics = none
max_velocity = 1000
max_accel = 1000
=======================
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
webhooks client 140734536300176: New connection
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
webhooks client 140734536300176: Client info {'program': 'Moonraker', 'version': 'v0.8.0-384-g8f3b30a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
webhooks client 140734536300176: Disconnected
webhooks client 140734555780176: New connection
webhooks client 140734555780176: Client info {'program': 'Moonraker', 'version': 'v0.8.0-384-g8f3b30a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 793, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 183, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 131, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 223, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/pi/klipper/klippy/klippy.py", line 223, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
            ^^^^^^^^^^^
  File "/home/pi/klipper/klippy/mcu.py", line 798, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
mcu 'mcu': Unable to connect
Once the underlying issue is corrected, use the
"FIRMWARE_RESTART" command to reset the firmware, reload the
config, and restart the host software.
Error configuring printer

No build file /home/pi/klipper/klippy/../.config
No build file /home/pi/klipper/klippy/../out/klipper.dict
No build file /home/pi/klipper/klippy/../out/klipper.elf
webhooks client 140734555780176: Disconnected
webhooks client 140734539160656: New connection
webhooks client 140734539160656: Client info {'program': 'Moonraker', 'version': 'v0.8.0-384-g8f3b30a'}
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-261-g248d3dbf'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, May  2 2024, 11:59:08) [GCC 12.2.0]'
Start printer at Tue Jul  9 15:18:35 2024 (1720534716.0 11.7)
===== Config file =====
[virtual_sdcard]
path = /home/pi/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[mcu]
serial = /dev/serial/by-id/<your-mcu-id>

[printer]
kinematics = none
max_velocity = 1000
max_accel = 1000
=======================
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
webhooks client 140733480792080: New connection
webhooks client 140733480792080: Client info {'program': 'Moonraker', 'version': 'v0.8.0-384-g8f3b30a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 793, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 183, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 131, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 223, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/pi/klipper/klippy/klippy.py", line 223, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
            ^^^^^^^^^^^
  File "/home/pi/klipper/klippy/mcu.py", line 798, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
mcu 'mcu': Unable to connect
Once the underlying issue is corrected, use the
"FIRMWARE_RESTART" command to reset the firmware, reload the
config, and restart the host software.
Error configuring printer

No build file /home/pi/klipper/klippy/../.config
No build file /home/pi/klipper/klippy/../out/klipper.dict
No build file /home/pi/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-261-g248d3dbf'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, May  2 2024, 11:59:08) [GCC 12.2.0]'
Start printer at Tue Jul  9 15:25:21 2024 (1720535121.1 11.8)
===== Config file =====
[virtual_sdcard]
path = /home/pi/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[mcu]
serial = /dev/serial/by-id/<your-mcu-id>

[printer]
kinematics = none
max_velocity = 1000
max_accel = 1000
=======================
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
webhooks client 140735302229200: New connection
webhooks client 140735302229200: Client info {'program': 'Moonraker', 'version': 'v0.8.0-384-g8f3b30a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 793, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 183, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 131, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 223, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/pi/klipper/klippy/klippy.py", line 223, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
            ^^^^^^^^^^^
  File "/home/pi/klipper/klippy/mcu.py", line 798, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
mcu 'mcu': Unable to connect
Once the underlying issue is corrected, use the
"FIRMWARE_RESTART" command to reset the firmware, reload the
config, and restart the host software.
Error configuring printer

No build file /home/pi/klipper/klippy/../.config
No build file /home/pi/klipper/klippy/../out/klipper.dict
No build file /home/pi/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-261-g248d3dbf'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, May  2 2024, 11:59:08) [GCC 12.2.0]'
Start printer at Tue Jul  9 16:24:08 2024 (1720538648.1 11.8)
===== Config file =====
[virtual_sdcard]
path = /home/pi/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[mcu]
serial = /dev/serial/by-id/<your-mcu-id>

[printer]
kinematics = none
max_velocity = 1000
max_accel = 1000
=======================
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
webhooks client 140735860327248: New connection
webhooks client 140735860327248: Client info {'program': 'Moonraker', 'version': 'v0.8.0-384-g8f3b30a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/<your-mcu-id>: [Errno 2] No such file or directory: '/dev/serial/by-id/<your-mcu-id>'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 793, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 183, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 131, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 223, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/pi/klipper/klippy/klippy.py", line 223, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
            ^^^^^^^^^^^
  File "/home/pi/klipper/klippy/mcu.py", line 798, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
mcu 'mcu': Unable to connect
Once the underlying issue is corrected, use the
"FIRMWARE_RESTART" command to reset the firmware, reload the
config, and restart the host software.
Error configuring printer

No build file /home/pi/klipper/klippy/../.config
No build file /home/pi/klipper/klippy/../out/klipper.dict
No build file /home/pi/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-261-g248d3dbf'
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, May  2 2024, 11:59:08) [GCC 12.2.0]'
Start printer at Tue Jul  9 17:23:40 2024 (1720542221.0 11.5)
===== Config file =====
[gcode_macro PARK]
gcode = 
	status_busy
	{% set th = printer.toolhead %}
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30

[gcode_macro CG28]
gcode = 
	status_homing
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro CQGL]
gcode = 
	{% if printer.quad_gantry_level.applied == False %}
	status_calibrating_z
	{% if "xyz" not in printer.toolhead.homed_axes %}
	status_homing
	G28
	{% endif %}
	QUAD_GANTRY_LEVEL
	{% endif %}

[gcode_macro G32]
gcode = 
	SAVE_GCODE_STATE NAME=STATE_G32
	G90
	CG28
	CQGL
	G28 Z
	status_meshing
	BED_MESH_CALIBRATE ADAPTIVE=1
	PARK
	RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro PRINT_START]
gcode = 
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	{% set target_chamber = params.CHAMBER|default("35")|int %}
	SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={target_chamber}
	status_heating
	M190 S{target_bed}
	M109 S{target_extruder}
	G32
	G90
	G1 Z20 F3000
	status_printing
	LINE_PURGE
	SFS_ENABLE

[gcode_macro PRINT_END]
gcode = 
	
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	
	M400
	G92 E0
	G1 E-5.0 F1800
	
	TURN_OFF_HEATERS
	
	SFS_DISABLE
	
	G90
	G0 X{x_safe} Y{y_safe} Z{z_safe} F20000
	G0 X{2 * th.axis_maximum.x//3} Y{th.axis_maximum.y - 2} F3600
	M107
	
	BED_MESH_CLEAR
	status_part_ready
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro PAUSE]
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}
description = Pause the actual running print

[gcode_macro RESUME]
rename_existing = RESUME_BASE
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}
description = Resume the actual running print
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False

[gcode_macro CANCEL_PRINT]
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE
description = Cancel the actual running print

[gcode_macro M600]
gcode = 
	
	PAUSE

[mcu EBBCan]
canbus_uuid = 5f35f76b28ae

[temperature_sensor EBB_NTC]
sensor_type = Generic 3950
sensor_pin = EBBCan:gpio28

[adxl345]
cs_pin = EBBCan:gpio1
spi_software_sclk_pin = EBBCan:gpio2
spi_software_mosi_pin = EBBCan:gpio0
spi_software_miso_pin = EBBCan:gpio3
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[extruder]
step_pin = EBBCan:gpio18
dir_pin = EBBCan:gpio19
enable_pin = !EBBCan:gpio17
microsteps = 32
rotation_distance = 21.9985825
gear_ratio = 50:10
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = EBBCan:gpio7
control = pid
pid_kp = 26.385
pid_ki = 3.383
pid_kd = 51.450
min_temp = -100
max_temp = 285
max_extrude_cross_section = 5
sensor_type = MAX31865
sensor_pin = EBBCan:gpio9
spi_software_sclk_pin = EBBCan:gpio10
spi_software_mosi_pin = EBBCan:gpio8
spi_software_miso_pin = EBBCan:gpio11
rtd_nominal_r = 1000
rtd_reference_r = 4300
rtd_num_of_wires = 2
rtd_use_50hz_filter = True

[tmc2209 extruder]
uart_pin = EBBCan:gpio20
run_current = 0.3
stealthchop_threshold = 999999

[fan]
pin = EBBCan:gpio13

[heater_fan hotend_fan]
pin = EBBCan:gpio14
heater = extruder
heater_temp = 50.0

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[neopixel UnderLighting]
pin = PB0
chain_count = 75
initial_red = 1.0
initial_green = 0.0
initial_blue = 0.0
color_order = GRB

[neopixel sb_leds]
pin = EBBCan:gpio16
chain_count = 10
color_order = GRB, GRB, GRB, GRB, GRB, GRB, GRB, GRB, GRBW,  GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[led_effect sb_logo_busy]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (1,0,0)

[led_effect sb_logo_cleaning]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 0.02, 0.5)

[led_effect sb_logo_calibrating_z]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 0.0, 0.35)

[led_effect sb_logo_heating]
leds = 
	neopixel:sb_leds (1,3,7,8,6,2)
autostart = false
frame_rate = 24
layers = 
	comet  0.3  0 add (1, 0.18, 0)

[led_effect sb_logo_cooling]
leds = 
	neopixel:sb_leds (1,3,7,8,6,2)
	neopixel:UnderLighting
autostart = false
frame_rate = 24
layers = 
	comet  0.3  0 add (0, 0, 1)

[led_effect sb_logo_homing]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 0.6, 0.2)

[led_effect sb_logo_leveling]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.5, 0.1, 0.4)

[led_effect sb_logo_meshing]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.2, 1.0, 0.0)

[led_effect sb_logo_printing]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	gradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)

[led_effect sb_logo_standby]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.01, 0.01, 0.01)

[led_effect sb_logo_part_ready]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 1.0, 0.0)

[led_effect sb_nozzle_heating]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (1.0, 0.18, 0.0, 0.0)

[led_effect sb_nozzle_cooling]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.0, 0.0, 1.0, 0.1)

[led_effect sb_nozzle_standby]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.6, 0.0, 0.0, 0.0)

[led_effect sb_nozzle_part_ready]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.6, 1.0, 0.0, 0.1)

[led_effect sb_critical_error]
leds = 
	neopixel:sb_leds
	neopixel:UnderLighting
layers = 
	strobe         1  1.5   add        (1.0,  1.0, 1.0)
	breathing      2  0     difference (0.95, 0.0, 0.0)
	static         1  0     top        (1.0,  0.0, 0.0)
autostart = false
frame_rate = 24
run_on_error = true

[led_effect rainbow]
leds = 
	neopixel:sb_leds
	neopixel:UnderLighting
autostart = true
frame_rate = 24
layers = 
	gradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)

[led_effect set_nozzle_leds]
leds = 
	neopixel:sb_leds (9,10)
autostart = false
frame_rate = 24
layers = 
	static         0  0     top        (0.0,  0.0, 0.0, 1.0)

[led_effect set_logo_leds]
leds = 
	neopixel:sb_leds (1,2,3,4,5,6,7,8)
autostart = false
frame_rate = 24
layers = 
	static         0  0     top        (1.0,  1.0, 1.0)

[gcode_macro set_logo_leds_off]
gcode = 
	SET_LED_EFFECT EFFECT=set_logo_leds STOP=1

[gcode_macro set_logo_leds_on]
gcode = 
	SET_LED_EFFECT EFFECT=set_logo_leds

[gcode_macro set_nozzle_leds_on]
gcode = 
	SET_LED_EFFECT EFFECT=set_nozzle_leds

[gcode_macro set_nozzle_leds_off]
gcode = 
	SET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1

[gcode_macro status_off]
gcode = 
	STOP_LED_EFFECTS

[gcode_macro status_ready]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=rainbow

[gcode_macro status_part_ready]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_nozzle_part_ready
	SET_LED_EFFECT EFFECT=sb_logo_part_ready

[gcode_macro status_busy]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_busy
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_heating
	SET_LED_EFFECT EFFECT=sb_nozzle_heating

[gcode_macro status_cooling]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_cooling
	SET_LED_EFFECT EFFECT=sb_nozzle_cooling

[gcode_macro status_leveling]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_leveling
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_homing
	set_nozzle_leds_on

[gcode_macro status_changeFilament]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_critical_error
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_cleaning
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_meshing
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_calibrating_z
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_printing
	set_nozzle_leds_on

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
variable_adaptive_enable = True
variable_z_height = 0.4
variable_purge_amount = 40
variable_line_length = 75
variable_flow_rate = 12
variable_x_default = 10
variable_y_default = 10
variable_distance_to_object_y = 5
variable_display_parameters = True
gcode = 
	
	{% if display_parameters == True %}
	{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }
	{ action_respond_info("z_height        : %f" % (z_height))  }
	{ action_respond_info("purge_amount    : %f" % (purge_amount))  }
	{ action_respond_info("line_length     : %f" % (line_length))  }
	{ action_respond_info("flow_rate       : %f" % (flow_rate))  }
	{ action_respond_info("x_default       : %f" % (x_default))  }
	{ action_respond_info("y_default       : %f" % (y_default))  }
	{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }
	{% endif %}
	
	{% if adaptive_enable == True %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}
	{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}
	{% set x_origin = ([x_origin, 0] | max) %}
	{% set y_origin = ([y_origin, 0] | max) %}
	{% else %}
	{% set x_origin = x_default | float %}
	{% set y_origin = y_default | float %}
	{% endif %}
	{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}
	{% set cross_section = nozzle_dia * z_height | float %}
	{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{x_origin} Y{y_origin - distance_to_object_y}
	G0 Z{z_height}
	M83
	G1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{z_height * 2} F{travel_speed}

[gcode_macro SETUP_LINE_PURGE]
gcode = 
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}

[exclude_object]

[gcode_arcs]
resolution = 0.1

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00

[printer]
kinematics = corexy
max_velocity = 800
max_accel = 4000
max_accel_to_decel = 4000
max_z_velocity = 20
max_z_accel = 350
square_corner_velocity = 5.0

[input_shaper]
shaper_type_x = mzv
shaper_freq_x = 50.0
shaper_type_y = mzv
shaper_freq_y = 37.8

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.75
min_temp = -200
max_temp = 120
control = pid
pid_kp = 44.597
pid_ki = 2.065
pid_kd = 240.826

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 25
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 25
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PF11
dir_pin = PG3
enable_pin = !PG5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32
endstop_pin = PG10
position_max = 310
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = 1.456

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = PF10
enable_pin = !PG2
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[idle_timeout]
timeout = 1800

[safe_z_home]
home_xy_position = 122,350
speed = 500
z_hop = 10

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 500
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[probe]
pin = EBBCan:gpio6
x_offset = 0
y_offset = 25.0
z_offset = 0
speed = 7.5
samples = 3
samples_result = median
sample_retract_dist = 3.0
samples_tolerance = 0.01
samples_tolerance_retries = 5

[temperature_fan chamber]
pin = PD12
max_power = 0.65
shutdown_speed = 0.0
kick_start_time = 5.0
cycle_time = 0.01
off_below = 0.1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PF4
min_temp = 0
max_temp = 70
target_temp = 35.0
control = watermark
gcode_id = C

[controller_fan controller_fan_0]
pin = PD13
kick_start_time = 0.5
idle_timeout = 120
fan_speed = 0.6

[controller_fan controller_fan_1]
pin = PD14
kick_start_time = 0.5
idle_timeout = 120
fan_speed = 0.6

[filament_motion_sensor SFS_T0]
detection_length = 14.00
extruder = extruder
switch_pin = ^PG12
pause_on_runout = True
event_delay = 3.0
pause_delay = 0.5
runout_gcode = 
	M117 Runout Detected!

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0

[gcode_macro SFS_ENABLE]
description = Enable smart filament sensor
gcode = 
	M117 ENABLING the Smart Filament Sensor
	G92 E0
	SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1

[gcode_macro SFS_DISABLE]
description = Disable smart filament sensor
gcode = 
	M117 DISABLING the Smart Filament Sensor
	G92 E0
	SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0

[output_pin caselight]
pin = PB10
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[bed_mesh]
speed = 300
horizontal_move_z = 10
mesh_min = 40, 40
mesh_max = 310,310
fade_start = 0.6
fade_end = 10.0
probe_count = 7,7
adaptive_margin = 5
algorithm = bicubic
zero_reference_position = 175,175

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=<5V>

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.0
initial_green = 0.0
initial_blue = 1.0
color_order = RGB

[bed_mesh default]
version = 1
points = 
	-0.027500, -0.022500, -0.021250, -0.025000
	-0.013750, -0.005000, -0.002500, -0.022500
	-0.008750, 0.013750, 0.023750, -0.011250
	-0.008750, -0.005000, -0.007500, -0.015000
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 112.02
max_x = 237.97
min_y = 112.84
max_y = 237.16
=======================
Extruder max_extrude_ratio=2.078758
Config error
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 130, in _connect
    self._read_config()
  File "/home/pi/klipper/klippy/klippy.py", line 127, in _read_config
    pconfig.check_unused_options(config)
  File "/home/pi/klipper/klippy/configfile.py", line 305, in check_unused_options
    raise error("Section '%s' is not a valid config section"
configparser.Error: Section 'led_effect sb_logo_busy' is not a valid config section
webhooks client 140734368275728: New connection
webhooks client 140734368275728: Client info {'program': 'Moonraker', 'version': 'v0.8.0-384-g8f3b30a'}
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-261-g248d3dbf-dirty'
Untracked files: klippy/extras/led_effect.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, May  2 2024, 11:59:08) [GCC 12.2.0]'
Start printer at Tue Jul  9 17:25:53 2024 (1720542353.8 144.1)
===== Config file =====
[gcode_macro PARK]
gcode = 
	status_busy
	{% set th = printer.toolhead %}
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30

[gcode_macro CG28]
gcode = 
	status_homing
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro CQGL]
gcode = 
	{% if printer.quad_gantry_level.applied == False %}
	status_calibrating_z
	{% if "xyz" not in printer.toolhead.homed_axes %}
	status_homing
	G28
	{% endif %}
	QUAD_GANTRY_LEVEL
	{% endif %}

[gcode_macro G32]
gcode = 
	SAVE_GCODE_STATE NAME=STATE_G32
	G90
	CG28
	CQGL
	G28 Z
	status_meshing
	BED_MESH_CALIBRATE ADAPTIVE=1
	PARK
	RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro PRINT_START]
gcode = 
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	{% set target_chamber = params.CHAMBER|default("35")|int %}
	SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={target_chamber}
	status_heating
	M190 S{target_bed}
	M109 S{target_extruder}
	G32
	G90
	G1 Z20 F3000
	status_printing
	LINE_PURGE
	SFS_ENABLE

[gcode_macro PRINT_END]
gcode = 
	
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	
	M400
	G92 E0
	G1 E-5.0 F1800
	
	TURN_OFF_HEATERS
	
	SFS_DISABLE
	
	G90
	G0 X{x_safe} Y{y_safe} Z{z_safe} F20000
	G0 X{2 * th.axis_maximum.x//3} Y{th.axis_maximum.y - 2} F3600
	M107
	
	BED_MESH_CLEAR
	status_part_ready
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro PAUSE]
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}
description = Pause the actual running print

[gcode_macro RESUME]
rename_existing = RESUME_BASE
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}
description = Resume the actual running print
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False

[gcode_macro CANCEL_PRINT]
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE
description = Cancel the actual running print

[gcode_macro M600]
gcode = 
	
	PAUSE

[mcu EBBCan]
canbus_uuid = 5f35f76b28ae

[temperature_sensor EBB_NTC]
sensor_type = Generic 3950
sensor_pin = EBBCan:gpio28

[adxl345]
cs_pin = EBBCan:gpio1
spi_software_sclk_pin = EBBCan:gpio2
spi_software_mosi_pin = EBBCan:gpio0
spi_software_miso_pin = EBBCan:gpio3
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[extruder]
step_pin = EBBCan:gpio18
dir_pin = EBBCan:gpio19
enable_pin = !EBBCan:gpio17
microsteps = 32
rotation_distance = 21.9985825
gear_ratio = 50:10
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = EBBCan:gpio7
control = pid
pid_kp = 26.385
pid_ki = 3.383
pid_kd = 51.450
min_temp = -100
max_temp = 285
max_extrude_cross_section = 5
sensor_type = MAX31865
sensor_pin = EBBCan:gpio9
spi_software_sclk_pin = EBBCan:gpio10
spi_software_mosi_pin = EBBCan:gpio8
spi_software_miso_pin = EBBCan:gpio11
rtd_nominal_r = 1000
rtd_reference_r = 4300
rtd_num_of_wires = 2
rtd_use_50hz_filter = True

[tmc2209 extruder]
uart_pin = EBBCan:gpio20
run_current = 0.3
stealthchop_threshold = 999999

[fan]
pin = EBBCan:gpio13

[heater_fan hotend_fan]
pin = EBBCan:gpio14
heater = extruder
heater_temp = 50.0

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[neopixel UnderLighting]
pin = PB0
chain_count = 75
initial_red = 1.0
initial_green = 0.0
initial_blue = 0.0
color_order = GRB

[neopixel sb_leds]
pin = EBBCan:gpio16
chain_count = 10
color_order = GRB, GRB, GRB, GRB, GRB, GRB, GRB, GRB, GRBW,  GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[led_effect sb_logo_busy]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (1,0,0)

[led_effect sb_logo_cleaning]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 0.02, 0.5)

[led_effect sb_logo_calibrating_z]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 0.0, 0.35)

[led_effect sb_logo_heating]
leds = 
	neopixel:sb_leds (1,3,7,8,6,2)
autostart = false
frame_rate = 24
layers = 
	comet  0.3  0 add (1, 0.18, 0)

[led_effect sb_logo_cooling]
leds = 
	neopixel:sb_leds (1,3,7,8,6,2)
	neopixel:UnderLighting
autostart = false
frame_rate = 24
layers = 
	comet  0.3  0 add (0, 0, 1)

[led_effect sb_logo_homing]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 0.6, 0.2)

[led_effect sb_logo_leveling]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.5, 0.1, 0.4)

[led_effect sb_logo_meshing]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.2, 1.0, 0.0)

[led_effect sb_logo_printing]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	gradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)

[led_effect sb_logo_standby]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.01, 0.01, 0.01)

[led_effect sb_logo_part_ready]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 1.0, 0.0)

[led_effect sb_nozzle_heating]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (1.0, 0.18, 0.0, 0.0)

[led_effect sb_nozzle_cooling]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.0, 0.0, 1.0, 0.1)

[led_effect sb_nozzle_standby]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.6, 0.0, 0.0, 0.0)

[led_effect sb_nozzle_part_ready]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.6, 1.0, 0.0, 0.1)

[led_effect sb_critical_error]
leds = 
	neopixel:sb_leds
	neopixel:UnderLighting
layers = 
	strobe         1  1.5   add        (1.0,  1.0, 1.0)
	breathing      2  0     difference (0.95, 0.0, 0.0)
	static         1  0     top        (1.0,  0.0, 0.0)
autostart = false
frame_rate = 24
run_on_error = true

[led_effect rainbow]
leds = 
	neopixel:sb_leds
	neopixel:UnderLighting
autostart = true
frame_rate = 24
layers = 
	gradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)

[led_effect set_nozzle_leds]
leds = 
	neopixel:sb_leds (9,10)
autostart = false
frame_rate = 24
layers = 
	static         0  0     top        (0.0,  0.0, 0.0, 1.0)

[led_effect set_logo_leds]
leds = 
	neopixel:sb_leds (1,2,3,4,5,6,7,8)
autostart = false
frame_rate = 24
layers = 
	static         0  0     top        (1.0,  1.0, 1.0)

[gcode_macro set_logo_leds_off]
gcode = 
	SET_LED_EFFECT EFFECT=set_logo_leds STOP=1

[gcode_macro set_logo_leds_on]
gcode = 
	SET_LED_EFFECT EFFECT=set_logo_leds

[gcode_macro set_nozzle_leds_on]
gcode = 
	SET_LED_EFFECT EFFECT=set_nozzle_leds

[gcode_macro set_nozzle_leds_off]
gcode = 
	SET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1

[gcode_macro status_off]
gcode = 
	STOP_LED_EFFECTS

[gcode_macro status_ready]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=rainbow

[gcode_macro status_part_ready]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_nozzle_part_ready
	SET_LED_EFFECT EFFECT=sb_logo_part_ready

[gcode_macro status_busy]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_busy
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_heating
	SET_LED_EFFECT EFFECT=sb_nozzle_heating

[gcode_macro status_cooling]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_cooling
	SET_LED_EFFECT EFFECT=sb_nozzle_cooling

[gcode_macro status_leveling]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_leveling
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_homing
	set_nozzle_leds_on

[gcode_macro status_changeFilament]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_critical_error
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_cleaning
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_meshing
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_calibrating_z
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_printing
	set_nozzle_leds_on

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
variable_adaptive_enable = True
variable_z_height = 0.4
variable_purge_amount = 40
variable_line_length = 75
variable_flow_rate = 12
variable_x_default = 10
variable_y_default = 10
variable_distance_to_object_y = 5
variable_display_parameters = True
gcode = 
	
	{% if display_parameters == True %}
	{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }
	{ action_respond_info("z_height        : %f" % (z_height))  }
	{ action_respond_info("purge_amount    : %f" % (purge_amount))  }
	{ action_respond_info("line_length     : %f" % (line_length))  }
	{ action_respond_info("flow_rate       : %f" % (flow_rate))  }
	{ action_respond_info("x_default       : %f" % (x_default))  }
	{ action_respond_info("y_default       : %f" % (y_default))  }
	{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }
	{% endif %}
	
	{% if adaptive_enable == True %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}
	{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}
	{% set x_origin = ([x_origin, 0] | max) %}
	{% set y_origin = ([y_origin, 0] | max) %}
	{% else %}
	{% set x_origin = x_default | float %}
	{% set y_origin = y_default | float %}
	{% endif %}
	{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}
	{% set cross_section = nozzle_dia * z_height | float %}
	{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{x_origin} Y{y_origin - distance_to_object_y}
	G0 Z{z_height}
	M83
	G1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{z_height * 2} F{travel_speed}

[gcode_macro SETUP_LINE_PURGE]
gcode = 
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}

[exclude_object]

[gcode_arcs]
resolution = 0.1

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00

[printer]
kinematics = corexy
max_velocity = 800
max_accel = 4000
max_accel_to_decel = 4000
max_z_velocity = 20
max_z_accel = 350
square_corner_velocity = 5.0

[input_shaper]
shaper_type_x = mzv
shaper_freq_x = 50.0
shaper_type_y = mzv
shaper_freq_y = 37.8

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.75
min_temp = -200
max_temp = 120
control = pid
pid_kp = 44.597
pid_ki = 2.065
pid_kd = 240.826

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 25
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 25
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PF11
dir_pin = PG3
enable_pin = !PG5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32
endstop_pin = PG10
position_max = 310
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = 1.456

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = PF10
enable_pin = !PG2
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[idle_timeout]
timeout = 1800

[safe_z_home]
home_xy_position = 122,350
speed = 500
z_hop = 10

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 500
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[probe]
pin = EBBCan:gpio6
x_offset = 0
y_offset = 25.0
z_offset = 0
speed = 7.5
samples = 3
samples_result = median
sample_retract_dist = 3.0
samples_tolerance = 0.01
samples_tolerance_retries = 5

[temperature_fan chamber]
pin = PD12
max_power = 0.65
shutdown_speed = 0.0
kick_start_time = 5.0
cycle_time = 0.01
off_below = 0.1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PF4
min_temp = 0
max_temp = 70
target_temp = 35.0
control = watermark
gcode_id = C

[controller_fan controller_fan_0]
pin = PD13
kick_start_time = 0.5
idle_timeout = 120
fan_speed = 0.6

[controller_fan controller_fan_1]
pin = PD14
kick_start_time = 0.5
idle_timeout = 120
fan_speed = 0.6

[filament_motion_sensor SFS_T0]
detection_length = 14.00
extruder = extruder
switch_pin = ^PG12
pause_on_runout = True
event_delay = 3.0
pause_delay = 0.5
runout_gcode = 
	M117 Runout Detected!

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0

[gcode_macro SFS_ENABLE]
description = Enable smart filament sensor
gcode = 
	M117 ENABLING the Smart Filament Sensor
	G92 E0
	SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1

[gcode_macro SFS_DISABLE]
description = Disable smart filament sensor
gcode = 
	M117 DISABLING the Smart Filament Sensor
	G92 E0
	SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0

[output_pin caselight]
pin = PB10
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[bed_mesh]
speed = 300
horizontal_move_z = 10
mesh_min = 40, 40
mesh_max = 310,310
fade_start = 0.6
fade_end = 10.0
probe_count = 7,7
adaptive_margin = 5
algorithm = bicubic
zero_reference_position = 175,175

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=<5V>

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.0
initial_green = 0.0
initial_blue = 1.0
color_order = RGB

[bed_mesh default]
version = 1
points = 
	-0.027500, -0.022500, -0.021250, -0.025000
	-0.013750, -0.005000, -0.002500, -0.022500
	-0.008750, 0.013750, 0.023750, -0.011250
	-0.008750, -0.005000, -0.007500, -0.015000
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 112.02
max_x = 237.97
min_y = 112.84
max_y = 237.16
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
webhooks client 140733322845648: New connection
webhooks client 140733322845648: Client info {'program': 'Moonraker', 'version': 'v0.8.0-384-g8f3b30a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 793, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 183, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 131, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 223, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/pi/klipper/klippy/klippy.py", line 223, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
            ^^^^^^^^^^^
  File "/home/pi/klipper/klippy/mcu.py", line 798, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
mcu 'mcu': Unable to connect
Once the underlying issue is corrected, use the
"FIRMWARE_RESTART" command to reset the firmware, reload the
config, and restart the host software.
Error configuring printer

No build file /home/pi/klipper/klippy/../.config
No build file /home/pi/klipper/klippy/../out/klipper.dict
No build file /home/pi/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-261-g248d3dbf-dirty'
Untracked files: klippy/extras/led_effect.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, May  2 2024, 11:59:08) [GCC 12.2.0]'
Start printer at Tue Jul  9 17:28:08 2024 (1720542488.2 11.9)
===== Config file =====
[gcode_macro PARK]
gcode = 
	status_busy
	{% set th = printer.toolhead %}
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30

[gcode_macro CG28]
gcode = 
	status_homing
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro CQGL]
gcode = 
	{% if printer.quad_gantry_level.applied == False %}
	status_calibrating_z
	{% if "xyz" not in printer.toolhead.homed_axes %}
	status_homing
	G28
	{% endif %}
	QUAD_GANTRY_LEVEL
	{% endif %}

[gcode_macro G32]
gcode = 
	SAVE_GCODE_STATE NAME=STATE_G32
	G90
	CG28
	CQGL
	G28 Z
	status_meshing
	BED_MESH_CALIBRATE ADAPTIVE=1
	PARK
	RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro PRINT_START]
gcode = 
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	{% set target_chamber = params.CHAMBER|default("35")|int %}
	SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={target_chamber}
	status_heating
	M190 S{target_bed}
	M109 S{target_extruder}
	G32
	G90
	G1 Z20 F3000
	status_printing
	LINE_PURGE
	SFS_ENABLE

[gcode_macro PRINT_END]
gcode = 
	
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	
	M400
	G92 E0
	G1 E-5.0 F1800
	
	TURN_OFF_HEATERS
	
	SFS_DISABLE
	
	G90
	G0 X{x_safe} Y{y_safe} Z{z_safe} F20000
	G0 X{2 * th.axis_maximum.x//3} Y{th.axis_maximum.y - 2} F3600
	M107
	
	BED_MESH_CLEAR
	status_part_ready
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro PAUSE]
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}
description = Pause the actual running print

[gcode_macro RESUME]
rename_existing = RESUME_BASE
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}
description = Resume the actual running print
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False

[gcode_macro CANCEL_PRINT]
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE
description = Cancel the actual running print

[gcode_macro M600]
gcode = 
	
	PAUSE

[mcu EBBCan]
canbus_uuid = 5f35f76b28ae

[temperature_sensor EBB_NTC]
sensor_type = Generic 3950
sensor_pin = EBBCan:gpio28

[adxl345]
cs_pin = EBBCan:gpio1
spi_software_sclk_pin = EBBCan:gpio2
spi_software_mosi_pin = EBBCan:gpio0
spi_software_miso_pin = EBBCan:gpio3
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[extruder]
step_pin = EBBCan:gpio18
dir_pin = EBBCan:gpio19
enable_pin = !EBBCan:gpio17
microsteps = 32
rotation_distance = 21.9985825
gear_ratio = 50:10
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = EBBCan:gpio7
control = pid
pid_kp = 26.385
pid_ki = 3.383
pid_kd = 51.450
min_temp = -100
max_temp = 285
max_extrude_cross_section = 5
sensor_type = MAX31865
sensor_pin = EBBCan:gpio9
spi_software_sclk_pin = EBBCan:gpio10
spi_software_mosi_pin = EBBCan:gpio8
spi_software_miso_pin = EBBCan:gpio11
rtd_nominal_r = 1000
rtd_reference_r = 4300
rtd_num_of_wires = 2
rtd_use_50hz_filter = True

[tmc2209 extruder]
uart_pin = EBBCan:gpio20
run_current = 0.3
stealthchop_threshold = 999999

[fan]
pin = EBBCan:gpio13

[heater_fan hotend_fan]
pin = EBBCan:gpio14
heater = extruder
heater_temp = 50.0

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[neopixel UnderLighting]
pin = PB0
chain_count = 75
initial_red = 1.0
initial_green = 0.0
initial_blue = 0.0
color_order = GRB

[neopixel sb_leds]
pin = EBBCan:gpio16
chain_count = 10
color_order = GRB, GRB, GRB, GRB, GRB, GRB, GRB, GRB, GRBW,  GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[led_effect sb_logo_busy]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (1,0,0)

[led_effect sb_logo_cleaning]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 0.02, 0.5)

[led_effect sb_logo_calibrating_z]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 0.0, 0.35)

[led_effect sb_logo_heating]
leds = 
	neopixel:sb_leds (1,3,7,8,6,2)
autostart = false
frame_rate = 24
layers = 
	comet  0.3  0 add (1, 0.18, 0)

[led_effect sb_logo_cooling]
leds = 
	neopixel:sb_leds (1,3,7,8,6,2)
	neopixel:UnderLighting
autostart = false
frame_rate = 24
layers = 
	comet  0.3  0 add (0, 0, 1)

[led_effect sb_logo_homing]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 0.6, 0.2)

[led_effect sb_logo_leveling]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.5, 0.1, 0.4)

[led_effect sb_logo_meshing]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.2, 1.0, 0.0)

[led_effect sb_logo_printing]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	gradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)

[led_effect sb_logo_standby]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.01, 0.01, 0.01)

[led_effect sb_logo_part_ready]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 1.0, 0.0)

[led_effect sb_nozzle_heating]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (1.0, 0.18, 0.0, 0.0)

[led_effect sb_nozzle_cooling]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.0, 0.0, 1.0, 0.1)

[led_effect sb_nozzle_standby]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.6, 0.0, 0.0, 0.0)

[led_effect sb_nozzle_part_ready]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.6, 1.0, 0.0, 0.1)

[led_effect sb_critical_error]
leds = 
	neopixel:sb_leds
	neopixel:UnderLighting
layers = 
	strobe         1  1.5   add        (1.0,  1.0, 1.0)
	breathing      2  0     difference (0.95, 0.0, 0.0)
	static         1  0     top        (1.0,  0.0, 0.0)
autostart = false
frame_rate = 24
run_on_error = true

[led_effect rainbow]
leds = 
	neopixel:sb_leds
	neopixel:UnderLighting
autostart = true
frame_rate = 24
layers = 
	gradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)

[led_effect set_nozzle_leds]
leds = 
	neopixel:sb_leds (9,10)
autostart = false
frame_rate = 24
layers = 
	static         0  0     top        (0.0,  0.0, 0.0, 1.0)

[led_effect set_logo_leds]
leds = 
	neopixel:sb_leds (1,2,3,4,5,6,7,8)
autostart = false
frame_rate = 24
layers = 
	static         0  0     top        (1.0,  1.0, 1.0)

[gcode_macro set_logo_leds_off]
gcode = 
	SET_LED_EFFECT EFFECT=set_logo_leds STOP=1

[gcode_macro set_logo_leds_on]
gcode = 
	SET_LED_EFFECT EFFECT=set_logo_leds

[gcode_macro set_nozzle_leds_on]
gcode = 
	SET_LED_EFFECT EFFECT=set_nozzle_leds

[gcode_macro set_nozzle_leds_off]
gcode = 
	SET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1

[gcode_macro status_off]
gcode = 
	STOP_LED_EFFECTS

[gcode_macro status_ready]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=rainbow

[gcode_macro status_part_ready]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_nozzle_part_ready
	SET_LED_EFFECT EFFECT=sb_logo_part_ready

[gcode_macro status_busy]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_busy
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_heating
	SET_LED_EFFECT EFFECT=sb_nozzle_heating

[gcode_macro status_cooling]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_cooling
	SET_LED_EFFECT EFFECT=sb_nozzle_cooling

[gcode_macro status_leveling]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_leveling
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_homing
	set_nozzle_leds_on

[gcode_macro status_changeFilament]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_critical_error
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_cleaning
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_meshing
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_calibrating_z
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_printing
	set_nozzle_leds_on

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
variable_adaptive_enable = True
variable_z_height = 0.4
variable_purge_amount = 40
variable_line_length = 75
variable_flow_rate = 12
variable_x_default = 10
variable_y_default = 10
variable_distance_to_object_y = 5
variable_display_parameters = True
gcode = 
	
	{% if display_parameters == True %}
	{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }
	{ action_respond_info("z_height        : %f" % (z_height))  }
	{ action_respond_info("purge_amount    : %f" % (purge_amount))  }
	{ action_respond_info("line_length     : %f" % (line_length))  }
	{ action_respond_info("flow_rate       : %f" % (flow_rate))  }
	{ action_respond_info("x_default       : %f" % (x_default))  }
	{ action_respond_info("y_default       : %f" % (y_default))  }
	{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }
	{% endif %}
	
	{% if adaptive_enable == True %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}
	{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}
	{% set x_origin = ([x_origin, 0] | max) %}
	{% set y_origin = ([y_origin, 0] | max) %}
	{% else %}
	{% set x_origin = x_default | float %}
	{% set y_origin = y_default | float %}
	{% endif %}
	{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}
	{% set cross_section = nozzle_dia * z_height | float %}
	{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{x_origin} Y{y_origin - distance_to_object_y}
	G0 Z{z_height}
	M83
	G1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{z_height * 2} F{travel_speed}

[gcode_macro SETUP_LINE_PURGE]
gcode = 
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}

[exclude_object]

[gcode_arcs]
resolution = 0.1

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00

[printer]
kinematics = corexy
max_velocity = 800
max_accel = 4000
max_accel_to_decel = 4000
max_z_velocity = 20
max_z_accel = 350
square_corner_velocity = 5.0

[input_shaper]
shaper_type_x = mzv
shaper_freq_x = 50.0
shaper_type_y = mzv
shaper_freq_y = 37.8

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.75
min_temp = -200
max_temp = 120
control = pid
pid_kp = 44.597
pid_ki = 2.065
pid_kd = 240.826

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 25
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 25
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PF11
dir_pin = PG3
enable_pin = !PG5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32
endstop_pin = PG10
position_max = 310
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = 1.456

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = PF10
enable_pin = !PG2
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[idle_timeout]
timeout = 1800

[safe_z_home]
home_xy_position = 122,350
speed = 500
z_hop = 10

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 500
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[probe]
pin = EBBCan:gpio6
x_offset = 0
y_offset = 25.0
z_offset = 0
speed = 7.5
samples = 3
samples_result = median
sample_retract_dist = 3.0
samples_tolerance = 0.01
samples_tolerance_retries = 5

[temperature_fan chamber]
pin = PD12
max_power = 0.65
shutdown_speed = 0.0
kick_start_time = 5.0
cycle_time = 0.01
off_below = 0.1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PF4
min_temp = 0
max_temp = 70
target_temp = 35.0
control = watermark
gcode_id = C

[controller_fan controller_fan_0]
pin = PD13
kick_start_time = 0.5
idle_timeout = 120
fan_speed = 0.6

[controller_fan controller_fan_1]
pin = PD14
kick_start_time = 0.5
idle_timeout = 120
fan_speed = 0.6

[filament_motion_sensor SFS_T0]
detection_length = 14.00
extruder = extruder
switch_pin = ^PG12
pause_on_runout = True
event_delay = 3.0
pause_delay = 0.5
runout_gcode = 
	M117 Runout Detected!

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0

[gcode_macro SFS_ENABLE]
description = Enable smart filament sensor
gcode = 
	M117 ENABLING the Smart Filament Sensor
	G92 E0
	SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1

[gcode_macro SFS_DISABLE]
description = Disable smart filament sensor
gcode = 
	M117 DISABLING the Smart Filament Sensor
	G92 E0
	SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0

[output_pin caselight]
pin = PB10
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[bed_mesh]
speed = 300
horizontal_move_z = 10
mesh_min = 40, 40
mesh_max = 310,310
fade_start = 0.6
fade_end = 10.0
probe_count = 7,7
adaptive_margin = 5
algorithm = bicubic
zero_reference_position = 175,175

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=<5V>

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.0
initial_green = 0.0
initial_blue = 1.0
color_order = RGB

[bed_mesh default]
version = 1
points = 
	-0.027500, -0.022500, -0.021250, -0.025000
	-0.013750, -0.005000, -0.002500, -0.022500
	-0.008750, 0.013750, 0.023750, -0.011250
	-0.008750, -0.005000, -0.007500, -0.015000
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 112.02
max_x = 237.97
min_y = 112.84
max_y = 237.16
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
webhooks client 140735494659216: New connection
webhooks client 140735494659216: Client info {'program': 'Moonraker', 'version': 'v0.8.0-384-g8f3b30a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
MCU error during connect
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/mcu.py", line 793, in _mcu_identify
    self._serial.connect_uart(self._serialport, self._baud, rts)
  File "/home/pi/klipper/klippy/serialhdl.py", line 183, in connect_uart
    self._error("Unable to connect")
  File "/home/pi/klipper/klippy/serialhdl.py", line 61, in _error
    raise error(self.warn_prefix + (msg % params))
serialhdl.error: mcu 'mcu': Unable to connect

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/pi/klipper/klippy/klippy.py", line 131, in _connect
    self.send_event("klippy:mcu_identify")
  File "/home/pi/klipper/klippy/klippy.py", line 223, in send_event
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/pi/klipper/klippy/klippy.py", line 223, in <listcomp>
    return [cb(*params) for cb in self.event_handlers.get(event, [])]
            ^^^^^^^^^^^
  File "/home/pi/klipper/klippy/mcu.py", line 798, in _mcu_identify
    raise error(str(e))
mcu.error: mcu 'mcu': Unable to connect
mcu 'mcu': Unable to connect
Once the underlying issue is corrected, use the
"FIRMWARE_RESTART" command to reset the firmware, reload the
config, and restart the host software.
Error configuring printer

No build file /home/pi/klipper/klippy/../.config
No build file /home/pi/klipper/klippy/../out/klipper.dict
No build file /home/pi/klipper/klippy/../out/klipper.elf
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-261-g248d3dbf-dirty'
Untracked files: klippy/extras/led_effect.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, May  2 2024, 11:59:08) [GCC 12.2.0]'
Start printer at Tue Jul  9 20:06:53 2024 (1720552013.5 12.1)
===== Config file =====
[gcode_macro PARK]
gcode = 
	status_busy
	{% set th = printer.toolhead %}
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30

[gcode_macro CG28]
gcode = 
	status_homing
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro CQGL]
gcode = 
	{% if printer.quad_gantry_level.applied == False %}
	status_calibrating_z
	{% if "xyz" not in printer.toolhead.homed_axes %}
	status_homing
	G28
	{% endif %}
	QUAD_GANTRY_LEVEL
	{% endif %}

[gcode_macro G32]
gcode = 
	SAVE_GCODE_STATE NAME=STATE_G32
	G90
	CG28
	CQGL
	G28 Z
	status_meshing
	BED_MESH_CALIBRATE ADAPTIVE=1
	PARK
	RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro PRINT_START]
gcode = 
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	{% set target_chamber = params.CHAMBER|default("35")|int %}
	SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={target_chamber}
	status_heating
	M190 S{target_bed}
	M109 S{target_extruder}
	G32
	G90
	G1 Z20 F3000
	status_printing
	LINE_PURGE
	SFS_ENABLE

[gcode_macro PRINT_END]
gcode = 
	
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	
	M400
	G92 E0
	G1 E-5.0 F1800
	
	TURN_OFF_HEATERS
	
	SFS_DISABLE
	
	G90
	G0 X{x_safe} Y{y_safe} Z{z_safe} F20000
	G0 X{2 * th.axis_maximum.x//3} Y{th.axis_maximum.y - 2} F3600
	M107
	
	BED_MESH_CLEAR
	status_part_ready
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro PAUSE]
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}
description = Pause the actual running print

[gcode_macro RESUME]
rename_existing = RESUME_BASE
variable_zhop = 0
variable_etemp = 0
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	{% set prompt_txt = [] %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
	{% endif %}
	
	{% if not (runout_resume and do_resume) %}
	RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
	{% for element in prompt_txt %}
	RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
	{% endfor %}
	RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
	RESPOND TYPE=command MSG="action:prompt_show"
	{% endif %}
description = Resume the actual running print
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False

[gcode_macro CANCEL_PRINT]
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE
description = Cancel the actual running print

[gcode_macro M600]
gcode = 
	
	PAUSE

[mcu EBBCan]
canbus_uuid = 5f35f76b28ae

[temperature_sensor EBB_NTC]
sensor_type = Generic 3950
sensor_pin = EBBCan:gpio28

[adxl345]
cs_pin = EBBCan:gpio1
spi_software_sclk_pin = EBBCan:gpio2
spi_software_mosi_pin = EBBCan:gpio0
spi_software_miso_pin = EBBCan:gpio3
axes_map = z,-y,x

[resonance_tester]
probe_points = 100, 100, 20
accel_chip = adxl345

[extruder]
step_pin = EBBCan:gpio18
dir_pin = EBBCan:gpio19
enable_pin = !EBBCan:gpio17
microsteps = 32
rotation_distance = 21.9985825
gear_ratio = 50:10
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = EBBCan:gpio7
control = pid
pid_kp = 26.385
pid_ki = 3.383
pid_kd = 51.450
min_temp = -100
max_temp = 285
max_extrude_cross_section = 5
sensor_type = MAX31865
sensor_pin = EBBCan:gpio9
spi_software_sclk_pin = EBBCan:gpio10
spi_software_mosi_pin = EBBCan:gpio8
spi_software_miso_pin = EBBCan:gpio11
rtd_nominal_r = 1000
rtd_reference_r = 4300
rtd_num_of_wires = 2
rtd_use_50hz_filter = True

[tmc2209 extruder]
uart_pin = EBBCan:gpio20
run_current = 0.3
stealthchop_threshold = 999999

[fan]
pin = EBBCan:gpio13

[heater_fan hotend_fan]
pin = EBBCan:gpio14
heater = extruder
heater_temp = 50.0

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[neopixel UnderLighting]
pin = PB0
chain_count = 75
initial_red = 1.0
initial_green = 0.0
initial_blue = 0.0
color_order = GRB

[neopixel sb_leds]
pin = EBBCan:gpio16
chain_count = 10
color_order = GRB, GRB, GRB, GRB, GRB, GRB, GRB, GRB, GRBW,  GRBW
initial_red = 1.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[led_effect sb_logo_busy]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (1,0,0)

[led_effect sb_logo_cleaning]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 0.02, 0.5)

[led_effect sb_logo_calibrating_z]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 0.0, 0.35)

[led_effect sb_logo_heating]
leds = 
	neopixel:sb_leds (1,3,7,8,6,2)
autostart = false
frame_rate = 24
layers = 
	comet  0.3  0 add (1, 0.18, 0)

[led_effect sb_logo_cooling]
leds = 
	neopixel:sb_leds (1,3,7,8,6,2)
	neopixel:UnderLighting
autostart = false
frame_rate = 24
layers = 
	comet  0.3  0 add (0, 0, 1)

[led_effect sb_logo_homing]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 0.6, 0.2)

[led_effect sb_logo_leveling]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.5, 0.1, 0.4)

[led_effect sb_logo_meshing]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.2, 1.0, 0.0)

[led_effect sb_logo_printing]
autostart = false
frame_rate = 12
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	gradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)

[led_effect sb_logo_standby]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.01, 0.01, 0.01)

[led_effect sb_logo_part_ready]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (0.0, 1.0, 0.0)

[led_effect sb_nozzle_heating]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
	neopixel:UnderLighting
layers = 
	breathing  3 1 top (1.0, 0.18, 0.0, 0.0)

[led_effect sb_nozzle_cooling]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.0, 0.0, 1.0, 0.1)

[led_effect sb_nozzle_standby]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.6, 0.0, 0.0, 0.0)

[led_effect sb_nozzle_part_ready]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.6, 1.0, 0.0, 0.1)

[led_effect sb_critical_error]
leds = 
	neopixel:sb_leds
	neopixel:UnderLighting
layers = 
	strobe         1  1.5   add        (1.0,  1.0, 1.0)
	breathing      2  0     difference (0.95, 0.0, 0.0)
	static         1  0     top        (1.0,  0.0, 0.0)
autostart = false
frame_rate = 24
run_on_error = true

[led_effect rainbow]
leds = 
	neopixel:sb_leds
	neopixel:UnderLighting
autostart = true
frame_rate = 24
layers = 
	gradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)

[led_effect set_nozzle_leds]
leds = 
	neopixel:sb_leds (9,10)
autostart = false
frame_rate = 24
layers = 
	static         0  0     top        (0.0,  0.0, 0.0, 1.0)

[led_effect set_logo_leds]
leds = 
	neopixel:sb_leds (1,2,3,4,5,6,7,8)
autostart = false
frame_rate = 24
layers = 
	static         0  0     top        (1.0,  1.0, 1.0)

[gcode_macro set_logo_leds_off]
gcode = 
	SET_LED_EFFECT EFFECT=set_logo_leds STOP=1

[gcode_macro set_logo_leds_on]
gcode = 
	SET_LED_EFFECT EFFECT=set_logo_leds

[gcode_macro set_nozzle_leds_on]
gcode = 
	SET_LED_EFFECT EFFECT=set_nozzle_leds

[gcode_macro set_nozzle_leds_off]
gcode = 
	SET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1

[gcode_macro status_off]
gcode = 
	STOP_LED_EFFECTS

[gcode_macro status_ready]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=rainbow

[gcode_macro status_part_ready]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_nozzle_part_ready
	SET_LED_EFFECT EFFECT=sb_logo_part_ready

[gcode_macro status_busy]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_busy
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_heating
	SET_LED_EFFECT EFFECT=sb_nozzle_heating

[gcode_macro status_cooling]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_cooling
	SET_LED_EFFECT EFFECT=sb_nozzle_cooling

[gcode_macro status_leveling]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_leveling
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_homing
	set_nozzle_leds_on

[gcode_macro status_changeFilament]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_critical_error
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_cleaning
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_meshing
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_calibrating_z
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_printing
	set_nozzle_leds_on

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
variable_adaptive_enable = True
variable_z_height = 0.4
variable_purge_amount = 40
variable_line_length = 75
variable_flow_rate = 12
variable_x_default = 10
variable_y_default = 10
variable_distance_to_object_y = 5
variable_display_parameters = True
gcode = 
	
	{% if display_parameters == True %}
	{ action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }
	{ action_respond_info("z_height        : %f" % (z_height))  }
	{ action_respond_info("purge_amount    : %f" % (purge_amount))  }
	{ action_respond_info("line_length     : %f" % (line_length))  }
	{ action_respond_info("flow_rate       : %f" % (flow_rate))  }
	{ action_respond_info("x_default       : %f" % (x_default))  }
	{ action_respond_info("y_default       : %f" % (y_default))  }
	{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }
	{% endif %}
	
	{% if adaptive_enable == True %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}
	{% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}
	{% set x_origin = ([x_origin, 0] | max) %}
	{% set y_origin = ([y_origin, 0] | max) %}
	{% else %}
	{% set x_origin = x_default | float %}
	{% set y_origin = y_default | float %}
	{% endif %}
	{% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}
	{% set cross_section = nozzle_dia * z_height | float %}
	{% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{x_origin} Y{y_origin - distance_to_object_y}
	G0 Z{z_height}
	M83
	G1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{z_height * 2} F{travel_speed}

[gcode_macro SETUP_LINE_PURGE]
gcode = 
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}
	SET_GCODE_VARIABLE MACRO=LINE_PURGE  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}

[exclude_object]

[gcode_arcs]
resolution = 0.1

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00

[printer]
kinematics = corexy
max_velocity = 800
max_accel = 4000
max_accel_to_decel = 4000
max_z_velocity = 20
max_z_accel = 350
square_corner_velocity = 5.0

[input_shaper]
shaper_type_x = mzv
shaper_freq_x = 50.0
shaper_type_y = mzv
shaper_freq_y = 37.8

[heater_bed]
heater_pin = PA3
sensor_type = Generic 3950
sensor_pin = PF3
max_power = 0.75
min_temp = -200
max_temp = 120
control = pid
pid_kp = 44.597
pid_ki = 2.065
pid_kd = 240.826

[stepper_x]
step_pin = PF13
dir_pin = PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = PG6
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 25
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PC4
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_y]
step_pin = PG0
dir_pin = PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 200
endstop_pin = PG9
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 25
homing_retract_dist = 5
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PD11
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z]
step_pin = PF11
dir_pin = PG3
enable_pin = !PG5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32
endstop_pin = PG10
position_max = 310
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 3
position_endstop = 1.456

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = !PC1
enable_pin = !PA0
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = PF10
enable_pin = !PG2
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PC13
dir_pin = !PF0
enable_pin = !PF1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 32

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = false
run_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0

[idle_timeout]
timeout = 1800

[safe_z_home]
home_xy_position = 122,350
speed = 500
z_hop = 10

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 500
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[probe]
pin = EBBCan:gpio6
x_offset = 0
y_offset = 25.0
z_offset = 0
speed = 7.5
samples = 3
samples_result = median
sample_retract_dist = 3.0
samples_tolerance = 0.01
samples_tolerance_retries = 5

[temperature_fan chamber]
pin = PD12
max_power = 0.65
shutdown_speed = 0.0
kick_start_time = 5.0
cycle_time = 0.01
off_below = 0.1
sensor_type = ATC Semitec 104GT-2
sensor_pin = PF4
min_temp = 0
max_temp = 70
target_temp = 35.0
control = watermark
gcode_id = C

[controller_fan controller_fan_0]
pin = PD13
kick_start_time = 0.5
idle_timeout = 120
fan_speed = 0.6

[controller_fan controller_fan_1]
pin = PD14
kick_start_time = 0.5
idle_timeout = 120
fan_speed = 0.6

[filament_motion_sensor SFS_T0]
detection_length = 14.00
extruder = extruder
switch_pin = ^PG12
pause_on_runout = True
event_delay = 3.0
pause_delay = 0.5
runout_gcode = 
	M117 Runout Detected!

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0

[gcode_macro SFS_ENABLE]
description = Enable smart filament sensor
gcode = 
	M117 ENABLING the Smart Filament Sensor
	G92 E0
	SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1

[gcode_macro SFS_DISABLE]
description = Disable smart filament sensor
gcode = 
	M117 DISABLING the Smart Filament Sensor
	G92 E0
	SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0

[output_pin caselight]
pin = PB10
pwm = true
shutdown_value = 0
value = 1
cycle_time = 0.01

[bed_mesh]
speed = 300
horizontal_move_z = 10
mesh_min = 40, 40
mesh_max = 310,310
fade_start = 0.6
fade_end = 10.0
probe_count = 7,7
adaptive_margin = 5
algorithm = bicubic
zero_reference_position = 175,175

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=<5V>

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.0
initial_green = 0.0
initial_blue = 1.0
color_order = RGB

[bed_mesh default]
version = 1
points = 
	-0.027500, -0.022500, -0.021250, -0.025000
	-0.013750, -0.005000, -0.002500, -0.022500
	-0.008750, 0.013750, 0.023750, -0.011250
	-0.008750, -0.005000, -0.007500, -0.015000
x_count = 4
y_count = 4
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 112.02
max_x = 237.97
min_y = 112.84
max_y = 237.16
=======================
Extruder max_extrude_ratio=2.078758
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
webhooks client 140734510210448: New connection
webhooks client 140734510210448: Client info {'program': 'Moonraker', 'version': 'v0.8.0-384-g8f3b30a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-Klipper_stm32f446xx_53005B000251313133353932-if00'
